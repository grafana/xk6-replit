{
  "parse": {
    "kind": "declaration",
    "name": "parse",
    "signature": "function parse(file: fs.File, options?: Partial<Options>): Promise<typeof SharedArray>;",
    "documentation": "The parse function parses an entire CSV file at once and returns a promise that resolves to a `SharedArray` instance. This function uses Go-based processing, which results in faster parsing and lower memory usage compared to JavaScript alternatives. It's ideal for scenarios where performance is a priority, and the entire CSV file can be loaded into memory."
  },
  "Parser": {
    "kind": "class",
    "name": "Parser",
    "documentation": "The `csv.Parser` class provides a streaming parser that reads CSV files line-by-line, offering fine-grained control over the parsing process and minimizing memory consumption. It's well-suited for scenarios where memory efficiency is crucial or when you need to process large CSV files without loading the entire file into memory.",
    "constructors": [
      {
        "kind": "constructor",
        "signature": "constructor(file: File, options: Partial<Options>)",
        "documentation": "Constructs a new Parser instance.",
        "params": [
          {
            "name": "file",
            "type": "File",
            "documentation": "- A csv file to parse, provided as a `fs.File` instance."
          },
          {
            "name": "options",
            "type": "Partial<Options>",
            "documentation": "- An optional configuration object for the parser."
          }
        ]
      }
    ],
    "members": {
      "next": {
        "kind": "method",
        "name": "next",
        "signature": "next()",
        "documentation": "Parses the next record from the CSV file.",
        "params": [],
        "returns": {
          "type": "Promise<{ done: boolean; value: string[]; }>",
          "documentation": "A promise that resolves to an object with the `done` property set to `true` if the end of the file is reached, and the `value` property set to an array of strings representing the record."
        }
      }
    },
    "signature": "Parser"
  },
  "Options": {
    "kind": "interface",
    "name": "Options",
    "documentation": "The Options object describes the configuration available for the operation of parsing CSV files using the `parse` function and the `Parser` class.",
    "members": {
      "delimiter": {
        "kind": "property",
        "name": "delimiter",
        "signature": "delimiter: string;",
        "documentation": "The delimiter character used in the CSV file. Default is ','.",
        "type": "string"
      },
      "skipFirstLine": {
        "kind": "property",
        "name": "skipFirstLine",
        "signature": "skipFirstLine: boolean;",
        "documentation": "Whether to skip the first line of the CSV file. Default is false.",
        "type": "boolean"
      },
      "fromLine": {
        "kind": "property",
        "name": "fromLine",
        "signature": "fromLine: number;",
        "documentation": "The line number the parsing should start from. Default is 0.",
        "type": "number"
      },
      "toLine": {
        "kind": "property",
        "name": "toLine",
        "signature": "toLine?: number;",
        "documentation": "The line number the parsing should stop at. Default is undefined.",
        "type": "number"
      },
      "asObjects": {
        "kind": "property",
        "name": "asObjects",
        "signature": "asObjects?: boolean;",
        "documentation": "AsObjects indicates that the CSV rows should be returned as objects, where the keys are the header column names, and values are the corresponding row values. When this option is enabled, the first line of the CSV file is treated as the header. If the option is set and no header line is present, this should be considered an error case. This option is incompatible with the `skipFirstLine` option, and if both are set, an error should be returned. Same thing applies if the `fromLine` option is set to a value greater than 0.",
        "type": "boolean"
      }
    },
    "signature": "Options"
  },
  "default": {
    "kind": "declaration",
    "name": "default",
    "signature": "* as default",
    "documentation": ""
  }
}